name: Build Webassembly
on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  test:
    name: Test WebAssembly
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
        target: 
          - wasm32-unknown-emscripten
          - wasm32-unknown-unknown
          - wasm32-wasip1
          - wasm32-wasip2
        include:
          - target: wasm32-unknown-emscripten
            container: emscripten/emsdk:latest
          - target: wasm32-unknown-unknown
            container: ghcr.io/portable-network-archive/wasi-sdk-gh-actions:wasi-sdk-26
          - target: wasm32-wasip1
            container: ghcr.io/portable-network-archive/wasi-sdk-gh-actions:wasi-sdk-26
          - target: wasm32-wasip2
            container: ghcr.io/portable-network-archive/wasi-sdk-gh-actions:wasi-sdk-26

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    timeout-minutes: 100
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
      - uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1.13.0
        with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.rust }}
          rustflags: ''
      - if: ${{ startsWith(matrix.target, 'wasm32-wasi') }}
        name: Setup wasmtime
        uses: bytecodealliance/actions/wasmtime/setup@3b93676295fd6f7eaa7af2c2785539e052fa8349 # v1.1.1
        with:
          github_token: ${{ github.token }}
      - if: ${{ startsWith(matrix.target, 'wasm32-wasi') }}
        name: Run test
        run: |
          cargo test -p libpna --target ${{ matrix.target }} -- --nocapture
      - if: ${{ startsWith(matrix.target, 'wasm32-wasip1') && matrix.rust == 'nightly'}}
        name: Run test
        run: |
          cargo test --target ${{ matrix.target }} -- --nocapture
      - if: ${{ startsWith(matrix.target, 'wasm32-unknown-emscripten') && matrix.rust != 'nightly' }}
        name: Run test
        run: |
          cargo test -p libpna --target ${{ matrix.target }} -- --skip test_readme_deps --skip test_html_root_url
        env:
          RUSTFLAGS: "-C link-arg=-sINITIAL_MEMORY=512MB -C link-arg=-sTOTAL_STACK=16MB"
      - name: Run on Node.js
        if: ${{ startsWith(matrix.target, 'wasm32-unknown-emscripten') && matrix.rust == 'nightly' }}
        run: |
          cargo run -p portable-network-archive --target ${{ matrix.target }} --release -- --help
        env:
          RUSTFLAGS: "-C link-arg=-sINITIAL_MEMORY=512MB -C link-arg=-sTOTAL_STACK=16MB"
      - if: ${{ endsWith(matrix.target, 'unknown') }}
        name: get wasm-bindgen version
        id: get_version
        run: |
          VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "wasm-bindgen") | .version')
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
      - if: ${{ endsWith(matrix.target, 'unknown') }}
        name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@8aac5aa2bf0dfaa2863eccad9f43c68fe40e5ec8 # v1.14.1
      - if: ${{ endsWith(matrix.target, 'unknown') }}
        name: Install wasm-bindgen-cli from crates.io
        run: |
          cargo binstall --no-confirm --force wasm-bindgen-cli --version ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For ease GitHub API rate limits
      - if: ${{ endsWith(matrix.target, 'unknown') }}
        name: Run test
        run: |
          cargo test -p libpna --target ${{ matrix.target }} --release
